{"version":3,"file":"dev.DZn2eKrs.js","sources":["../../src/validators/root-package-json.validator.ts","../../src/validators/root-tsconfig-json.validator.ts","../../src/commands/dev.ts"],"sourcesContent":["import { readFile, writeFile } from \"node:fs/promises\";\nimport { resolve } from \"node:path\";\n\nimport { PackageJson } from \"type-fest\";\n\nimport { logger } from \"../utils/logger\";\nimport type { RootPackageJsonValidatorOptions } from \"./root-package-json.validator.types\";\n\nexport const rootPackageJsonValidator = async (options: RootPackageJsonValidatorOptions) => {\n  if (options.noValidate) {\n    logger.debug(\"Skipping package.json validation\");\n    return;\n  }\n\n  logger.debug(\"Reading and parsing package.json\");\n  const pkgContent = await readFile(resolve(process.cwd(), \"package.json\"), \"utf-8\");\n  const pkg = JSON.parse(pkgContent) as PackageJson;\n\n  logger.debug(\"Package.json:\", pkg);\n  logger.debug(\"Checking package.json for validity for monorepo\");\n\n  if (!pkg.workspaces) {\n    if (!options.auto) {\n      logger.error(\n        \"No `workspaces` defined in package.json. Please define `workspaces` to continue or pass --auto flag to auto-configuration\"\n      );\n      return;\n    }\n\n    pkg.workspaces = [\"apps/*\", \"libs/*\"];\n    await writeFile(resolve(process.cwd(), \"package.json\"), JSON.stringify(pkg, null, 2), \"utf-8\");\n  }\n  logger.debug(\"package.json is valid\");\n};\n","import { existsSync } from \"node:fs\";\nimport { readFile, readdir } from \"node:fs/promises\";\nimport { resolve } from \"node:path\";\n\nimport type { PackageJson, TsConfigJson } from \"type-fest\";\n\nimport { logger } from \"../utils/logger\";\nimport type { RootTsconfigJsonValidatorTypes } from \"./root-tsconfig-json.validator.types\";\n\nexport const rootTsconfigJsonValidator = async (options: RootTsconfigJsonValidatorTypes) => {\n  if (options.noValidate) {\n    logger.debug(\"Skipping tsconfig.json validation\");\n    return;\n  }\n\n  logger.debug(\"Reading and parsing tsconfig.json\");\n  const tsconfigContent = await readFile(resolve(process.cwd(), \"tsconfig.json\"), \"utf-8\");\n  const tsconfig = JSON.parse(tsconfigContent) as TsConfigJson;\n\n  logger.debug(\"tsconfig.json:\", tsconfig);\n  logger.debug(\"Checking tsconfig.json to validity for monorepo\");\n\n  if (!tsconfig.compilerOptions?.baseUrl && !tsconfig.compilerOptions?.paths) {\n    if (!options.auto) {\n      logger.error(\n        \"No `baseUrl` or `paths` defined in compilerOptions in tsconfig.json. Please define `baseUrl` and `paths` to continue or pass --auto flag to auto-configuration\"\n      );\n\n      return;\n    }\n\n    logger.debug(\"Auto-configuring tsconfig.json for monorepo\");\n    tsconfig.compilerOptions ||= {};\n    tsconfig.compilerOptions.baseUrl = \".\";\n    tsconfig.compilerOptions.paths = {};\n\n    if (existsSync(resolve(process.cwd(), \"libs\"))) {\n      logger.debug(\"Reading shared libraries\");\n      const libsDir = await readdir(resolve(process.cwd(), \"libs\"));\n\n      for (const lib of libsDir) {\n        const libPkgContent = await readFile(resolve(process.cwd(), \"libs\", lib, \"package.json\"), \"utf-8\");\n        const libPkg = JSON.parse(libPkgContent) as PackageJson;\n        if (libPkg.name) {\n          tsconfig.compilerOptions!.paths![libPkg.name] = [`libs/${lib}/src/main.ts`];\n        }\n      }\n    }\n  }\n  logger.debug(\"tsconfig.json is valid\");\n};\n","import { createServer } from \"@fluxora/core\";\n\nimport { rootPackageJsonValidator } from \"../validators/root-package-json.validator\";\nimport { rootTsconfigJsonValidator } from \"../validators/root-tsconfig-json.validator\";\nimport { defineCommand } from \"./index\";\n\nexport const dev = defineCommand(\"dev\", \"Starting the development environment\")\n  .option(\"auto\", { type: \"boolean\", defaultValue: false, alias: \"a\", description: \"Auto-configure the environment\" })\n  .option(\"no-validate\", {\n    type: \"boolean\",\n    defaultValue: false,\n    alias: \"n\",\n    description: \"Skip validations of the environment\"\n  })\n  .execute(async args => {\n    await rootPackageJsonValidator(args);\n    await rootTsconfigJsonValidator(args);\n\n    const client = await createServer({ type: \"client\", env: \"development\", server: { port: 3000 } });\n    await client.serve();\n\n    const server = await createServer({ type: \"server\", env: \"development\", server: { port: 5000 } });\n    await server.serve();\n  });\n\nexport const devRunApp = defineCommand(\"dev:app\", \"Starting the development environment for a specific app\").execute(\n  // @ts-ignore\n  async args => {}\n);\n"],"names":[],"mappings":"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"}