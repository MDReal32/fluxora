{"version":3,"file":"fluxora.utils.js","sources":["../src/logger.ts"],"sourcesContent":["import { Logger, createLogger as createWinstonLogger, format, transports } from \"winston\";\nimport * as Transport from \"winston-transport\";\n\nimport type { LoggerOptions } from \"./logger.types\";\n\nexport const createLogger = (options?: LoggerOptions): Logger => {\n  const { name, pipeToConsole = true, pipeToFile = false, pipeToUrl = false, http, logLevel = \"info\" } = options || {};\n\n  const printFormat = format.printf(({ level, message, timestamp, ...meta }) => {\n    const metaString = Object.keys(meta).length ? ` ${JSON.stringify(meta, null, 2)}` : \"\";\n    return `${timestamp} [${name}] [${level}]: ${message} ${metaString}`;\n  });\n\n  const loggerTransports: Transport[] = [];\n\n  // File transports\n  if (pipeToFile) {\n    loggerTransports.push(\n      new transports.File({\n        filename: \"logs/error.log\",\n        level: \"error\",\n        format: format.combine(format.uncolorize())\n      }),\n      new transports.File({\n        filename: \"logs/warn.log\",\n        level: \"warn\",\n        format: format.combine(format.uncolorize())\n      }),\n      new transports.File({\n        filename: \"logs/info.log\",\n        level: \"info\",\n        format: format.combine(format.uncolorize())\n      }),\n      new transports.File({\n        filename: \"logs/verbose.log\",\n        level: \"verbose\",\n        format: format.combine(format.uncolorize())\n      }),\n      new transports.File({\n        filename: \"logs/debug.log\",\n        level: \"debug\",\n        format: format.combine(format.uncolorize())\n      }),\n      new transports.File({\n        filename: \"logs/silly.log\",\n        level: \"silly\",\n        format: format.combine(format.uncolorize())\n      })\n    );\n  }\n\n  // Console transport\n  if (pipeToConsole) {\n    loggerTransports.push(\n      new transports.Console({\n        format: format.combine(\n          format.colorize({ all: true }),\n          format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n          format.simple(),\n          printFormat\n        )\n      })\n    );\n  }\n\n  // HTTP transport\n  if (pipeToUrl && http) {\n    loggerTransports.push(\n      new transports.Http({\n        path: http.path,\n        headers: http.headers,\n        auth: http.auth\n          ? http.auth.type === \"basic\"\n            ? { username: http.auth.username, password: http.auth.password }\n            : { bearer: http.auth.token }\n          : undefined,\n        ssl: http.ssl,\n        format: format.combine(format.json())\n      })\n    );\n  }\n\n  return createWinstonLogger({\n    level: logLevel,\n    levels: { error: 0, warn: 1, info: 2, verbose: 3, debug: 4, silly: 5 },\n    format: format.combine(\n      format.colorize({ all: true }),\n      format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\n      format.simple(),\n      printFormat\n    ),\n    transports: loggerTransports\n  });\n};\n"],"names":["createWinstonLogger"],"mappings":"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"}